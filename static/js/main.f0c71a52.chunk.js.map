{"version":3,"sources":["Theme.js","presentation/views/AppBar/AppBarComponent.js","presentation/views/ChannelsList/ChannelListTile/ChannelListTile.js","application/state/atoms/channels.js","application/state/BaseState.js","Lazy.js","application/messaging/MessagingService.js","application/channels/ChannelsMapper.js","application/channels/ChannelsRepository.js","application/user/UserMapper.js","application/user/UserRepository.js","infrastructure/clients/TokenFormatter.js","Stream.js","application/SystemBus.js","application/messaging/MessagingHandler.js","application/channels/SubscriptionService.js","infrastructure/clients/SubscriptionClient.js","application/messaging/TokenRepository.js","infrastructure/storage/Storage.js","bootstrap.js","application/hooks/ChannelsList/ChannelListTile/useChannelsState.js","presentation/views/ChannelsList/ChannelSubGroup.js","presentation/views/ChannelsList/ChannelsList.js","application/hooks/Footer/useFooterState.js","presentation/views/Footer/Footer.js","application/messaging/stub/MessagingServiceStub.js","infrastructure/clients/stub/SubscriptionClientStub.js","devBootstrap.js","application/hooks/Initialization/useInitialization.js","App.js","index.js"],"names":["arcBlue","createMuiTheme","container","paddingLeft","palette","common","blue","orange","white","primary","main","secondary","text","typography","fontFamily","tab","textTransform","fontWeight","color","fontSize","h2","lineHeight","h3","h4","h6","subtitle1","subtitle2","body1","caption","learnButton","borderColor","borderWidth","borderRadius","overrides","MuiInputLabel","root","MuiButton","contained","backgroundColor","letterSpacing","MuiInput","underline","borderBottom","AppBarComponent","props","title","classes","makeStyles","theme","appbar","height","boxShadow","placementContainer","useStyles","Fragment","AppBar","position","className","Box","component","ChannelListTile","item","isSelected","isFinalElement","selectedChannelsChanged","width","channelContainer","channelName","ListItem","key","id","button","selected","onClick","ListItemAvatar","Avatar","alt","src","imageUrl","channelAvatar","ListItemText","Divider","variant","channelsSelectionAtom","atom","default","BaseState","immerable","this","type","error","dataMutator","undefined","produce","s","stateFunc","Lazy","generator","_generator","_value","value","bind","MessagingService","requestPermissionForNotificationsIfNeeded","a","_aTokenRepository","getPermissionsGranted","console","log","Notification","requestPermission","permission","setPermissionsGranted","deleteToken","messaging","getToken","then","currentToken","catch","err","sendTokenToServer","_aStorage","Container","mappings","Storage","_aTokenFormatter","TokenFormatter","TokenRepository","_aSystemBus","SystemBus","_aMessaingHandler","MessagingHandler","navigator","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","usePublicVapidKey","vapidKey","onTokenRefresh","onMessage","refreshedToken","send","payload","ChannelsJsonMapper","to","channels","JSON","stringify","from","json","parse","ChannelsRepository","getSubscribedChannels","channelsJson","get","keys","susbcribedChannels","Map","_aChannelsJsonMapper","Object","entries","updateSubscribedChannels","set","UserJsonMapper","user","UserRepository","getUser","userJson","_aUserJsonMapper","setUser","token","Stream","_subscribers","subscribe","onItem","onError","onComplete","handler","delete","message","_deliverMessage","e","SubscriptionService","_onTokenRefresh","setTokenSentToSever","subscribedChannels","_aChannelsRepository","getSubcribedChannels","subscribeAsync","getTokenSentToServer","_aUserRepository","_aChannelsClient","userId","setTokenSentToServer","SubscriptionsClient","SubscriptionClient","axios","endpoint","Date","tokenKey","setToken","tokenSentToServerKey","isSent","permissionsGrantedKey","val","window","localStorage","getItem","setItem","remove","removeItem","clear","asSingleton","name","func","lazy","asFactory","registerApplicationTypes","registerChannelsTypes","registerUserTypes","registerMessagingTypes","registerSystemBus","registerChannelMapper","registerChannelRepository","registerSubscriptionService","registerUserMapper","registerUsersRepository","registerMessagingManager","registerMessagingHandler","registerTokenRepository","registerInfrastructureTypes","registerStorage","registerTokenFormatter","registerSubscriptionsClient","actionTypes","State","selectedChannels","ChannelSubGroup","category","items","aChannelsRepository","setSelectedChannels","useSetRecoilState","useState","state","setState","_updateSelectedChannels","newState","useEffect","produceWithType","channelId","useChannelsState","headerContainer","marginTop","header","padding","verticalAlign","Typography","listItems","map","it","index","length","has","List","ChannelsList","channelsElements","c","Footer","aMessagingService","aSubscriptionService","useRecoilValue","resetSnackbar","useFooterState","footer","bottom","subscribeButton","successSnackbar","Snackbar","open","autoHideDuration","onClose","faliureSnackbar","style","Button","disabled","SubscriptionClientStub","devContainer","initialize","_regiserMockChannelsClient","_registerMockMessagingService","MessagingServiceStub","useInitialization","initializated","setInitializated","DevContainer","App","isInitialized","enableMapSet","ThemeProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0c71a52.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nconst arcOrange = \"#ff9800\";\r\nconst arcBlue = \"#0B72B9\";\r\nconst arcGrey = \"#868686\";\r\nconst arcWhite = \"#ffffff\";\r\nconst mainColor = arcOrange;\r\n\r\nexport default createMuiTheme({\r\n  container: {\r\n    paddingLeft: \"3vw\"\r\n  },\r\n  palette: {\r\n    common: {\r\n      blue: arcBlue,\r\n      orange: arcOrange,\r\n      white: arcWhite\r\n    },\r\n    primary: {\r\n      main: arcOrange\r\n    },\r\n    secondary: {\r\n      main: mainColor\r\n    },\r\n    text: {\r\n      primary: arcWhite\r\n    }\r\n  },\r\n  typography: {\r\n    fontFamily: 'Roboto',\r\n    tab: {\r\n      fontFamily: \"Raleway\",\r\n      textTransform: \"none\",\r\n      fontWeight: 700,\r\n      color: \"white\",\r\n      fontSize: \"1rem\"\r\n    },\r\n    h2: {\r\n      fontWeight: 700,\r\n      fontSize: \"2.5rem\",\r\n      color: arcBlue,\r\n      lineHeight: 1.5\r\n    },\r\n    h3: {\r\n      fontSize: \"2.5rem\",\r\n      color: arcBlue\r\n    },\r\n    h4: {\r\n      fontSize: \"1.75rem\",\r\n      color: arcBlue,\r\n      fontWeight: 700\r\n    },\r\n    h6: {\r\n      fontWeight: 500,\r\n      fontFamily: \"Raleway\",\r\n      color: arcBlue\r\n    },\r\n    subtitle1: {\r\n      fontSize: \"1.25rem\",\r\n      fontWeight: 300,\r\n      color: arcGrey\r\n    },\r\n    subtitle2: {\r\n      color: \"white\",\r\n      fontWeight: 300,\r\n      fontSize: \"1.25rem\"\r\n    },\r\n    body1: {\r\n      fontSize: \"1.25rem\",\r\n      color: arcGrey,\r\n      fontWeight: 300,\r\n      fontFamily: \"Roboto\",\r\n      fontWeight: 400\r\n    },\r\n    caption: {\r\n      fontSize: \"1rem\",\r\n      fontWeight: 300,\r\n      color: arcGrey\r\n    },\r\n    learnButton: {\r\n      borderColor: arcBlue,\r\n      borderWidth: 2,\r\n      textTransform: \"none\",\r\n      color: arcBlue,\r\n      borderRadius: 50,\r\n      fontFamily: \"Roboto\",\r\n      fontWeight: \"bold\"\r\n    }\r\n  },\r\n  overrides: {\r\n    MuiInputLabel: {\r\n      root: {\r\n        color: arcBlue,\r\n        fontSize: \"1rem\"\r\n      }\r\n    },\r\n    MuiButton: {\r\n      contained: {\r\n        backgroundColor: mainColor,\r\n        color: arcWhite,\r\n        fontSize: \"0.7rem\",\r\n        fontWeight: 400,\r\n        letterSpacing: 1,\r\n        '&:hover': {\r\n          backgroundColor: mainColor,\r\n          // Reset on touch devices, it doesn't add specificity\r\n          '@media (hover: none)': {\r\n            backgroundColor: mainColor,\r\n          },\r\n        }\r\n      },\r\n    },\r\n    MuiInput: {\r\n      root: {\r\n        color: arcGrey,\r\n        fontWeight: 300,\r\n        fontFamily: \"Roboto\"\r\n      },\r\n      underline: {\r\n        \"&:before\": {\r\n          borderBottom: `2px solid ${arcBlue}`\r\n        },\r\n        \"&:hover:not($disabled):not($focused):not($error):before\": {\r\n          borderBottom: `2px solid ${arcBlue}`\r\n        }\r\n      }\r\n    },\r\n  }\r\n});\r\n","import React from 'react'\r\nimport { makeStyles, AppBar, Box } from '@material-ui/core'\r\n\r\nexport default function AppBarComponent(props) {\r\n\r\n    var {title} = props;\r\n    title = title ? title : \"Channels List\";\r\n\r\n    const appBarHeight = \"45px\";\r\n    const useStyles = makeStyles(theme => ({\r\n            appbar: {\r\n                ...theme.typography,\r\n                height: appBarHeight,\r\n                boxShadow: \"none\",\r\n                color: theme.palette.text.primary,\r\n                lineHeight: appBarHeight,\r\n                fontWeight: 400,\r\n                fontSize: \"1rem\",\r\n                paddingLeft: \"5vw\"\r\n            },\r\n            placementContainer: {\r\n                height: appBarHeight\r\n            }\r\n        }));\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        \r\n        <React.Fragment>\r\n            <AppBar position=\"fixed\"\r\n                    className={classes.appbar}>\r\n\r\n                    <div>\r\n                        {title}\r\n                    </div>\r\n\r\n            </AppBar>\r\n\r\n            <Box component=\"div\"\r\n                className={classes.placementContainer}>\r\n            </Box>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport { ListItem, ListItemAvatar, ListItemText, Avatar, Divider } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nexport default function ChannelListTile(props) {\r\n    const {item, isSelected, isFinalElement, selectedChannelsChanged} = props;\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        \"MuiListItem-gutters\" : {\r\n            \"paddingLeft\": 0,\r\n        },\r\n        \"channelContainer\" : {\r\n            fontSize: \"1rem\"\r\n        },\r\n        \"channelAvatar\": {\r\n            height: \"50px\",\r\n            width: \"50px\"\r\n        }\r\n    }));\r\n    const classes = useStyles();\r\n\r\n    const channelContainer = <span className={classes.channelContainer}>{item.channelName}</span>\r\n\r\n    return (\r\n        <ListItem key={item.id}\r\n                  button\r\n                  className={classes[\"MuiListItem-gutters\"]}\r\n                  selected={isSelected}\r\n                  onClick={() => selectedChannelsChanged(item.id)}\r\n                  >\r\n\r\n            <ListItemAvatar>\r\n                <Avatar alt={item.channelName} \r\n                        src={item.imageUrl}\r\n                        className={classes.channelAvatar}></Avatar>\r\n            </ListItemAvatar>\r\n\r\n            <ListItemText primary={channelContainer}></ListItemText>\r\n\r\n            {isFinalElement && <Divider variant=\"inset\" \r\n                                        component=\"li\" /> }\r\n        </ListItem>\r\n    )\r\n}","\r\n\r\nimport { atom } from 'recoil'\r\n\r\nconst channelsSelectionKey = 'channelsSelection';\r\nconst channelsSelectionAtom = atom({\r\n    key: channelsSelectionKey,\r\n    default: [],\r\n  });\r\n\r\n\r\nexport {channelsSelectionAtom,\r\n        channelsSelectionKey};","import immerable, { produce } from \"immer\"\r\n\r\nclass BaseState {\r\n    [immerable] = true\r\n\r\n    constructor() {\r\n        this.type = 'Init';\r\n        this.error = null;\r\n    }\r\n\r\n    produceWithType(type, {dataMutator, error} = {dataMutator: undefined, error: undefined}) {\r\n        return produce(this, s => {\r\n            s.type = type;\r\n\r\n            if (dataMutator != undefined)\r\n                dataMutator(s);\r\n            \r\n            if (error != undefined)\r\n                s.error = error;\r\n        });\r\n    }\r\n\r\n    produce(stateFunc) {\r\n        return produce(this, stateFunc);\r\n    }\r\n}\r\n\r\nexport default BaseState;","export default class Lazy {\r\n    constructor(generator) {\r\n        this._generator = generator;\r\n        this._value = null;\r\n\r\n        this.value = this.value.bind(this);\r\n    }\r\n\r\n    value() {\r\n        if (this._value == null) {\r\n            this._value = this._generator();\r\n        }\r\n\r\n        return this._value;\r\n    }\r\n}\r\n\r\n","import { Container, mappings } from '../../bootstrap';\r\n\r\nexport default class MessagingService {\r\n    static vapidKey =  'BErhQNctr6h1-OlIfAfkGgdclkE9NSi6DqdFUD15IAT2b62vDaLB9sKW3VSN0JRJQJ_2hnW8KxxVwMro3ZapRaE';\r\n\r\n    constructor() {\r\n        this.sendTokenToServer = this.sendTokenToServer.bind(this);\r\n\r\n        this._aStorage = Container[mappings.Storage]();\r\n        this._aTokenFormatter = Container[mappings.TokenFormatter];\r\n        this._aTokenRepository = Container[mappings.TokenRepository];\r\n        this._aSystemBus = Container[mappings.SystemBus];\r\n        this._aMessaingHandler = Container[mappings.MessagingHandler];\r\n\r\n        const firebaseConfig = {\r\n            apiKey: \"AIzaSyAVK6bqlba-rlDJgp6vPVgxAUzQS4bhcsQ\",\r\n            authDomain: \"bias-free-news.firebaseapp.com\",\r\n            databaseURL: \"https://bias-free-news.firebaseio.com\",\r\n            projectId: \"bias-free-news\",\r\n            storageBucket: \"bias-free-news.appspot.com\",\r\n            messagingSenderId: \"329265328965\",\r\n            appId: \"1:329265328965:android:9f4f475a0f76381770c42c\",\r\n            };\r\n\r\n        // Initialize Firebase\r\n        navigator.firebase.initializeApp(firebaseConfig);\r\n\r\n        const messaging = navigator.firebase.messaging();\r\n        messaging.usePublicVapidKey(MessagingService.vapidKey);\r\n        \r\n        this.onTokenRefresh(messaging);\r\n        this.onMessage(messaging);\r\n    }\r\n\r\n    onTokenRefresh(messaging) {\r\n        // [START refresh_token]\r\n        // Callback fired if Instance ID token is updated.\r\n        messaging.onTokenRefresh(() => {\r\n            messaging.getToken().then((refreshedToken) => {\r\n                console.log('Token refreshed.');\r\n\r\n                this._aSystemBus.onTokenRefresh.send(refreshedToken);\r\n            });\r\n        });\r\n    }\r\n\r\n    onMessage(messaging) {\r\n        // [START receive_message]\r\n        // Handle incoming messages. Called when:\r\n        // - a message is received while the app has focus\r\n        // - the user clicks on an app notification created by a service worker\r\n        //   `messaging.setBackgroundMessageHandler` handler.\r\n        messaging.onMessage((payload) => {\r\n            console.log('Message received. ', payload);\r\n            \r\n            this._aMessaingHandler.onMessage.send(payload);\r\n            });\r\n    }\r\n    \r\n    requestPermissionForNotificationsIfNeeded = async () => {\r\n        if (this._aTokenRepository.getPermissionsGranted()) {\r\n            console.log('Requesting already granted');\r\n            return;\r\n        }\r\n\r\n        console.log('Requesting permission...');\r\n        \r\n        const permission = await Notification.requestPermission();\r\n        this._aTokenRepository.setPermissionsGranted(permission);\r\n\r\n        console.log(`Permission is ${permission}`);\r\n        return (permission === 'granted');\r\n    }\r\n\r\n    deleteToken = (messaging) => {\r\n        // Delete Instance ID token.\r\n        // [START delete_token]\r\n        messaging.getToken().then((currentToken) => {\r\n            messaging.deleteToken(currentToken).then(() => {\r\n            console.log('Token deleted.');\r\n            // [END_EXCLUDE]\r\n            }).catch((err) => {\r\n            console.log('Unable to delete token. ', err);\r\n            });\r\n            // [END delete_token]\r\n        }).catch((err) => {\r\n            console.log('Error retrieving Instance ID token. ', err);\r\n        });\r\n    }\r\n}\r\n    ","class ChannelsJsonMapper {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    to = (channels) => {\r\n        return JSON.stringify(channels);\r\n    }\r\n\r\n    from = (json) => {\r\n        return JSON.parse(json);\r\n    }\r\n}\r\n\r\nexport default ChannelsJsonMapper;","import { Container, mappings } from \"../../bootstrap\";\r\n\r\n\r\nclass ChannelsRepository {\r\n    static keys = {\r\n        susbcribedChannels: \"ChannelsRepository.subscribedChannels\",\r\n    };\r\n\r\n    constructor() {\r\n        this._aStorage = Container[mappings.Storage]();\r\n        this._aChannelsJsonMapper = Container[mappings.ChannelsJsonMapper]();\r\n    }\r\n\r\n    getSubscribedChannels = () => {\r\n        const channelsJson = this._aStorage.get(ChannelsRepository.keys.susbcribedChannels);\r\n        if (channelsJson == undefined || channelsJson == null)\r\n            return new Map();\r\n\r\n        const channels = this._aChannelsJsonMapper.from(channelsJson);\r\n\r\n        return new Map(Object.entries(channels));\r\n    }\r\n\r\n    updateSubscribedChannels = (channels) => {\r\n        const channelsJson = this._aChannelsJsonMapper.to(channels);\r\n        this._aStorage.set(ChannelsRepository.keys.susbcribedChannels, channelsJson);\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default ChannelsRepository;","import { Container, mappings } from \"../../bootstrap\"\r\n\r\nexport default class UserJsonMapper {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    to = (user) => {\r\n        return JSON.stringify(user);\r\n    }\r\n\r\n    from = (json) => {\r\n        return JSON.parse(json);\r\n    }\r\n}","import { Container, mappings } from \"../../bootstrap\";\r\n\r\nclass UserRepository {\r\n    static key = \"UserRepository.user\";\r\n\r\n    constructor() {\r\n        this._aStorage = Container[mappings.Storage]();\r\n        this._aUserJsonMapper = Container[mappings.UserJsonMapper]();\r\n    }\r\n\r\n    getUser = () => {\r\n        const userJson = this._aStorage.get(UserRepository.key);\r\n        if (userJson != null)\r\n            return this._aUserJsonMapper.from(userJson);\r\n    }\r\n\r\n    setUser = (user) => {\r\n        const userJson = this._aUserJsonMapper.to(user);\r\n        this._aStorage.set(UserRepository.key, userJson);\r\n    }\r\n}\r\n\r\nexport default UserRepository;","export default class TokenFormatter {\r\n    constructor() {\r\n        \r\n    }\r\n\r\n    format(token) {\r\n        \r\n    }\r\n}","export default class Stream {\r\n    constructor() {\r\n        this._subscribers = {};\r\n        this.send = this.send.bind(this);\r\n        this.subscribe = this.subscribe.bind(this);\r\n    }\r\n\r\n    subscribe({onItem, onError, onComplete}) {\r\n        const handler = {onItem, onError, onComplete};\r\n\r\n        this._subscribers[handler] = handler;\r\n\r\n        return () => {\r\n            if (onComplete !== undefined)\r\n                onComplete();\r\n\r\n            this._subscribers.delete(handler);\r\n        }\r\n    }\r\n\r\n    send(message, {to = null}) {\r\n        if (to !== null)\r\n            this._deliverMessage(message, to); \r\n        else {\r\n            for (const s in this._subscribers)\r\n            this._deliverMessage(message, s);\r\n        }\r\n    }\r\n\r\n    _deliverMessage(message, to) {\r\n        try {\r\n            to.onItem(message);\r\n        }\r\n        catch (e) {\r\n            if (to.onError)\r\n                to.onError(e);\r\n\r\n            else\r\n                console.log(e);\r\n        }\r\n    }\r\n}","import Stream from '../Stream'\r\n\r\nconst SystemBus = {\r\n    subscribe: new Stream(),\r\n    onTokenRefresh: new Stream()\r\n};\r\n\r\nexport default SystemBus;","export default class MessagingHandler {\r\n    constructor() {\r\n        \r\n    }\r\n\r\n    onMessage(message) {\r\n\r\n    }\r\n}","import { Container, mappings } from \"../../bootstrap\"\r\n\r\nexport default class SubscriptionService {\r\n    constructor() {\r\n        this._aChannelsClient = Container[mappings.SubscriptionsClient]();\r\n        this._aChannelsRepository = Container[mappings.ChannelsRepository]();\r\n        this._aTokenRepository = Container[mappings.TokenRepository]();\r\n        this._aUserRepository = Container[mappings.UserRepository]();\r\n        const aSystemBus = Container[mappings.SystemBus]();\r\n\r\n        aSystemBus.onTokenRefresh.subscribe({onItem: this._onTokenRefresh});\r\n    }\r\n\r\n    _onTokenRefresh = () => {\r\n        this._aTokenRepository.setTokenSentToSever(false);\r\n\r\n        const subscribedChannels = this._aChannelsRepository.getSubcribedChannels();\r\n        this.subscribeAsync(subscribedChannels);\r\n    }\r\n\r\n    subscribeAsync = async (channels) => {\r\n\r\n        if (this._aTokenRepository.getTokenSentToServer())\r\n            return;\r\n        if (channels) {\r\n            const user = this._aUserRepository.getUser();\r\n            const token = this._aTokenRepository.getToken();\r\n\r\n            if (token) {\r\n                await this._aChannelsClient.subscribeAsync({\r\n                    userId: user.id,\r\n                    channels: channels,\r\n                    token: token,\r\n                });\r\n\r\n                this._aTokenRepository.setTokenSentToServer(true);\r\n            }\r\n        }\r\n    }\r\n}","import axios from 'axios'\r\n\r\nexport default class SubscriptionClient {\r\n    static endpoint = \"https://www.test.com\";\r\n\r\n    subscribeAsync({userId, channels, token }) {\r\n        return axios.get(SubscriptionClient.endpoint,\r\n            {\r\n                userId: userId,\r\n                channels: channels,\r\n                token: token,\r\n                Date: new Date()\r\n            });\r\n    }\r\n  }","import { Container, mappings } from \"../../bootstrap\";\r\n\r\nexport default class TokenRepository {\r\n    static tokenKey = \"TokenRepository.token\";\r\n    static tokenSentToServerKey = \"TokenRepository.tokenSentToServerKey\";\r\n    static permissionsGrantedKey = \"TokenRepository.permissionsGrantedKey\";\r\n\r\n    constructor() {\r\n        this._aStorage = Container[mappings.Storage]();\r\n    }\r\n\r\n    getToken = () => this._aStorage.get(TokenRepository.tokenKey);\r\n\r\n    setToken = (token) => this._aStorage.set(token, TokenRepository.tokenKey);\r\n\r\n    getTokenSentToServer = () => this._aStorage.get(TokenRepository.tokenSentToServerKey);\r\n\r\n    setTokenSentToSever = (isSent) => this._aStorage.set(TokenRepository.tokenSentToServerKey, isSent);\r\n\r\n    getPermissionsGranted = () =>  {\r\n        console.log(\"before\");\r\n        this._aStorage.get(TokenRepository.permissionsGrantedKey);\r\n    }\r\n\r\n    setPermissionsGranted = (val) => this._aStorage.set(TokenRepository.permissionsGrantedKey, val);\r\n}","export default class Storage {\r\n    constructor() {\r\n        \r\n    }\r\n\r\n    get = (key) => window.localStorage.getItem(key);\r\n\r\n    set = (key, value) => window.localStorage.setItem(key, value);\r\n\r\n    remove = (key) => window.localStorage.removeItem(key);\r\n\r\n    clear = () => window.localStorage.clear();\r\n}","import Lazy from './Lazy';\r\nimport MessagingService from './application/messaging/MessagingService';\r\nimport ChannelsJsonMapper from './application/channels/ChannelsMapper';\r\nimport ChannelsRepository from'./application/channels/ChannelsRepository';\r\nimport UserJsonMapper from './application/user/UserMapper';\r\nimport UserRepository from './application/user/UserRepository';\r\nimport TokenFormatter from './infrastructure/clients/TokenFormatter';\r\nimport SystemBus from './application/SystemBus'\r\nimport MessagingHandler from './application/messaging/MessagingHandler';\r\nimport SubscriptionService from './application/channels/SubscriptionService';\r\nimport SubscriptionClient from './infrastructure/clients/SubscriptionClient';\r\nimport TokenRepository from './application/messaging/TokenRepository';\r\nimport Storage from './infrastructure/storage/Storage'\r\n\r\nconst mappings = {\r\n    MessagingService : \"MessagingManager\",\r\n    SystemBus: \"SystemBus\",\r\n    Storage: \"Storage\",\r\n    TokenFormatter: \"TokenFormatter\",\r\n    ChannelsRepository: \"ChannelsRepository\",\r\n    ChannelsJsonMapper: \"ChannelJsonMapper\",\r\n    UserRepository: \"UsersRepository\",\r\n    UserJsonMapper: \"UserJsonMapper\",\r\n    SubscriptionsClient: \"SubscriptionsClient\",\r\n    MessagingHandler: \"MessagingSink\",\r\n    TokenRepository: \"TokenRepository\",\r\n    SubscriptionService: \"SubscriptionService\"\r\n}\r\n\r\nclass Container {\r\n    constructor() {\r\n        this.registerApplicationTypes()\r\n            .registerInfrastructureTypes();\r\n    }\r\n\r\n    asSingleton = (name, func) => {\r\n        const lazy = new Lazy(() => func());\r\n        this[name] = () => lazy.value();\r\n    }\r\n\r\n    asFactory = (name, func) => {\r\n        this[name] = () => func();\r\n    }\r\n\r\n\r\n    registerApplicationTypes = () => {\r\n        return this.registerChannelsTypes()\r\n                   .registerUserTypes()\r\n                   .registerMessagingTypes()\r\n                   .registerSystemBus();\r\n    }\r\n\r\n        registerChannelsTypes = () => {\r\n            return this.registerChannelMapper()\r\n                       .registerChannelRepository()\r\n                       .registerSubscriptionService();\r\n        }\r\n\r\n            registerChannelMapper = () => {\r\n                this.asSingleton(mappings.ChannelsJsonMapper, () => new ChannelsJsonMapper());\r\n                return this;\r\n            }\r\n\r\n            registerChannelRepository = () => {\r\n                this.asSingleton(mappings.ChannelsRepository, () => new ChannelsRepository());\r\n                return this;\r\n            }\r\n\r\n            registerSubscriptionService = () => {\r\n                this.asSingleton(mappings.SubscriptionService, () => new SubscriptionService());\r\n                return this;\r\n            }\r\n\r\n\r\n        registerUserTypes = () => {\r\n            return this.registerUserMapper()\r\n                       .registerUsersRepository();\r\n        }\r\n\r\n            registerUserMapper = () => {\r\n                this.asSingleton(mappings.UserJsonMapper, () => new UserJsonMapper());\r\n                return this;\r\n            }\r\n\r\n            registerUsersRepository = () => {\r\n                this.asSingleton(mappings.UserRepository, () => new UserRepository());\r\n                return this;\r\n            }\r\n\r\n\r\n        registerMessagingTypes = () => {\r\n            return this.registerMessagingManager()\r\n                       .registerMessagingHandler()\r\n                       .registerTokenRepository();\r\n        }\r\n        \r\n            registerMessagingManager = () => {\r\n                this.asSingleton(mappings.MessagingService, () => new MessagingService());\r\n                return this;\r\n            }\r\n\r\n            registerMessagingHandler = () => {\r\n                this.asSingleton(mappings.MessagingHandler, () => new MessagingHandler());\r\n                return this;\r\n            }\r\n\r\n            registerTokenRepository = () => {\r\n                this.asSingleton(mappings.TokenRepository, () => new TokenRepository());\r\n                return this;\r\n            }\r\n\r\n        \r\n        registerSystemBus = () => {\r\n            this.asSingleton(mappings.SystemBus, () => SystemBus);\r\n            return this;\r\n        }\r\n\r\n\r\n    registerInfrastructureTypes = () => {\r\n        return this.registerStorage()\r\n                   .registerTokenFormatter()\r\n                   .registerSubscriptionsClient();\r\n    }\r\n\r\n        registerStorage = () => {\r\n            this.asSingleton(mappings.Storage, () => new Storage());\r\n            return this;\r\n        }\r\n\r\n        registerTokenFormatter = () => {\r\n            this.asSingleton(mappings.TokenFormatter, () => new TokenFormatter());\r\n            return this;\r\n        }\r\n\r\n        registerSubscriptionsClient = () => {\r\n            this.asSingleton(mappings.SubscriptionsClient, () => new SubscriptionClient());\r\n            return this;\r\n        }\r\n}\r\n\r\nconst container = new Container();\r\n\r\nexport {\r\n    mappings,\r\n    container as Container\r\n}","import { useSetRecoilState, useRecoilValue } from \"recoil\";\r\nimport { useEffect, useState } from \"react\";\r\nimport produce, { immerable } from \"immer\";\r\n\r\nimport { channelsSelectionAtom } from \"../../../state/atoms/channels\";\r\nimport BaseState from \"../../../state/BaseState\";\r\nimport { Container, mappings } from \"../../../../bootstrap\";\r\n\r\nconst actionTypes = {\r\n    INIT: 'Init',\r\n    SELECTED_CHANNELS_UPDATED: 'SelectedChannelsUpdated',\r\n}\r\n\r\nclass State extends BaseState {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this[immerable] = true \r\n        this.selectedChannels = new Map();\r\n    }\r\n}\r\n\r\nfunction useChannelsState() {\r\n    const aChannelsRepository = Container[mappings.ChannelsRepository]();\r\n\r\n    const setSelectedChannels = useSetRecoilState(channelsSelectionAtom);\r\n    const [state, setState] = useState(new State());\r\n\r\n    useEffect(() => {\r\n        const subscribedChannels = aChannelsRepository.getSubscribedChannels();\r\n\r\n        if (subscribedChannels) {\r\n            const newState = state.produceWithType(actionTypes.SELECTED_CHANNELS_UPDATED, {\r\n                dataMutator: s => s.selectedChannels = subscribedChannels });\r\n\r\n            _updateSelectedChannels(newState);\r\n        }\r\n           \r\n    }, []);\r\n\r\n    function selectedChannelsChanged(channelId) {\r\n\r\n        var newState = state.produceWithType(actionTypes.SELECTED_CHANNELS_UPDATED, {\r\n            dataMutator: s => {\r\n                if (s.selectedChannels.get(channelId) == undefined)\r\n                    s.selectedChannels.set(channelId, true);\r\n                else\r\n                    s.selectedChannels.delete(channelId);\r\n            }});\r\n\r\n        _updateSelectedChannels(newState);\r\n    }\r\n\r\n    function _updateSelectedChannels(newState) {\r\n        setState(newState);\r\n        setSelectedChannels(newState.selectedChannels);\r\n    }\r\n\r\n    return {state, selectedChannelsChanged };\r\n}\r\n\r\nexport { actionTypes, useChannelsState }","import React from 'react'\r\nimport { List, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nimport ChannelListTile from './ChannelListTile/ChannelListTile';\r\nimport { useChannelsState } from '../../../application/hooks/ChannelsList/ChannelListTile/useChannelsState';\r\n\r\nexport default function ChannelSubGroup({category, items}) {\r\n\r\n    const {state, selectedChannelsChanged} = useChannelsState();\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        headerContainer: {\r\n            marginTop: \"1rem\"\r\n        },\r\n        header: {\r\n            fontFamily: theme.typography.fontFamily,\r\n            fontSize: \"0.8rem\",\r\n            padding: \"0.2rem 1rem\",\r\n            verticalAlign: \"middle\",\r\n            color: theme.palette.common.white,\r\n            backgroundColor: theme.palette.primary.main\r\n        }\r\n    }))\r\n    const classes = useStyles();\r\n\r\n    const header = (\r\n        <Typography variant=\"button\" \r\n                    className={classes.header}>\r\n            {category}\r\n        </Typography>\r\n    )\r\n\r\n    const listItems = items.map((it, index) => (\r\n        <ChannelListTile \r\n            key={it.id} \r\n            item={it} \r\n            isFinalElement={index == items.length - 1}\r\n            isSelected={state.selectedChannels.has(it.id)}\r\n            selectedChannelsChanged={selectedChannelsChanged}>\r\n        </ChannelListTile>\r\n    ))\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className={classes.headerContainer}>\r\n                {header}\r\n            </div>\r\n            \r\n\r\n            <List>\r\n                {listItems}\r\n            </List>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport ChannelSubGroup from './ChannelSubGroup';\r\nimport { Box, makeStyles } from '@material-ui/core';\r\n\r\nfunction ChannelsList({channels}) {\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        container: {\r\n            paddingLeft: \"3vw\"\r\n        },\r\n        \r\n    }));\r\n    const classes = useStyles();\r\n\r\n    const channelsElements = channels.map(c => (\r\n        <ChannelSubGroup key={c.category} \r\n                         items={c.items}\r\n                         category={c.category}>\r\n        </ChannelSubGroup>\r\n    ));\r\n\r\n    return (\r\n        <Box className={classes.container}>\r\n            {channelsElements}\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default ChannelsList","import { useState } from 'react'\r\nimport { useRecoilValue } from 'recoil'\r\nimport produce, { immerable } from \"immer\";\r\nimport { Container, mappings } from '../../../bootstrap';\r\nimport { channelsSelectionAtom } from '../../state/atoms/channels'\r\nimport BaseState from '../../state/BaseState';\r\n\r\nconst actionTypes = {\r\n    INIT: 'Init',\r\n    CHANNELS_SUBSCRIBE_REQEUEST: 'ChannelsSubscribeRequest',\r\n    CHANNELS_SUBSCRIBED: 'ChannelsSubscribed',\r\n    CHANNELS_SUBSCRIBED_ERROR: 'ChannelsSubscribedError',\r\n}\r\n\r\nclass State extends BaseState {\r\n    constructor() {\r\n        super();\r\n\r\n        this[immerable] = true;\r\n    }\r\n}\r\n\r\nfunction useFooterState() {\r\n    const aMessagingService = Container[mappings.MessagingService]();\r\n    const aSubscriptionService = Container[mappings.SubscriptionService]();\r\n    const aChannelsRepository = Container[mappings.ChannelsRepository]();\r\n\r\n    const selectedChannels = useRecoilValue(channelsSelectionAtom);\r\n    const [state, setState] = useState(new State());\r\n\r\n    async function subscribeAsync() {\r\n        try {\r\n            while (!await aMessagingService.requestPermissionForNotificationsIfNeeded());\r\n\r\n            setState(state.produceWithType(actionTypes.CHANNELS_SUBSCRIBE_REQEUEST));\r\n\r\n            await aSubscriptionService.subscribeAsync(selectedChannels);\r\n\r\n            aChannelsRepository.updateSubscribedChannels(selectedChannels);\r\n\r\n            setState(state.produceWithType(actionTypes.CHANNELS_SUBSCRIBED));\r\n        }\r\n        catch (err) {\r\n            setState(state.produceWithType(actionTypes.CHANNELS_SUBSCRIBED_ERROR,\r\n                { error: err }\r\n            ));\r\n        }\r\n    }\r\n\r\n    function resetSnackbar() {\r\n        setState(state.produceWithType(actionTypes.INIT));\r\n    }\r\n\r\n    return { state, subscribeAsync, resetSnackbar };\r\n}\r\n\r\nexport { actionTypes, useFooterState };","import React from 'react'\r\nimport { Button, makeStyles, Box, Snackbar } from '@material-ui/core'\r\nimport { useFooterState, actionTypes } from '../../../application/hooks/Footer/useFooterState'\r\n\r\nfunction Footer(props) {\r\n    const { state, subscribeAsync, resetSnackbar } = useFooterState();\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        footer: {\r\n            width: \"100%\",\r\n            position: \"fixed\",\r\n            bottom: \"0\",\r\n        },\r\n        subscribeButton: {\r\n            width: \"100%\",\r\n        }\r\n    }));\r\n    const classes = useStyles();\r\n\r\n    const successSnackbar = (\r\n        <Snackbar open={state.type === actionTypes.CHANNELS_SUBSCRIBED} \r\n                  autoHideDuration={3000}\r\n                  onClose={resetSnackbar}\r\n                  message=\"Channels have been subscribed successfuly!\">\r\n        </Snackbar>\r\n    );\r\n\r\n    const faliureSnackbar = (\r\n        <Snackbar open={state.type === actionTypes.CHANNELS_SUBSCRIBED_ERROR} \r\n                  autoHideDuration={3000}\r\n                  onClose={resetSnackbar}\r\n                  message=\"An error has occured during the subscription process, please try again later\">\r\n      </Snackbar>\r\n    );\r\n\r\n    return (\r\n        <Box className={classes.footer}>\r\n            {successSnackbar}\r\n\r\n            {faliureSnackbar}\r\n\r\n            <div style={{\"padding\": \"5px\"}}>\r\n                <Button variant=\"contained\"\r\n                        disabled={state.type === actionTypes.CHANNELS_SUBSCRIBE_REQEUEST}\r\n                        onClick={subscribeAsync}\r\n                        className={classes.subscribeButton}>SUBSCRIBE</Button>\r\n\r\n            </div>\r\n            \r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Footer;","import { Container, mappings } from '../../../bootstrap';\r\n\r\nexport default class MessagingService {\r\n    static vapidKey =  'BErhQNctr6h1-OlIfAfkGgdclkE9NSi6DqdFUD15IAT2b62vDaLB9sKW3VSN0JRJQJ_2hnW8KxxVwMro3ZapRaE';\r\n\r\n    constructor() {\r\n        this._aStorage = Container[mappings.Storage]();\r\n        this._aTokenFormatter = Container[mappings.TokenFormatter]();\r\n        this._aTokenRepository = Container[mappings.TokenRepository]();\r\n        this._aSystemBus = Container[mappings.SystemBus]();\r\n        this._aMessaingHandler = Container[mappings.MessagingHandler]();\r\n    }\r\n\r\n    sendTokenRefreshed(refreshedToken) {\r\n        this._aSystemBus.onTokenRefresh.send(refreshedToken);\r\n    }\r\n\r\n    sendMessage(message) {\r\n        this._aMessaingHandler.onMessage.send(message);\r\n    }\r\n\r\n    requestPermissionForNotificationsIfNeeded = async () => {\r\n        if (this._aTokenRepository.getPermissionsGranted()) {\r\n            console.log('Requesting already granted');\r\n            return;\r\n        }\r\n\r\n        console.log('Requesting permission...');\r\n        \r\n        const permission = await Notification.requestPermission();\r\n        this._aTokenRepository.setPermissionsGranted(permission);\r\n\r\n        console.log(`Permission is ${permission}`);\r\n        return (permission === 'granted');\r\n    }\r\n\r\n    deleteToken = (messaging) => {\r\n        // Delete Instance ID token.\r\n        // [START delete_token]\r\n        messaging.getToken().then((currentToken) => {\r\n            messaging.deleteToken(currentToken).then(() => {\r\n            console.log('Token deleted.');\r\n            \r\n\r\n            // [END_EXCLUDE]\r\n            }).catch((err) => {\r\n            console.log('Unable to delete token. ', err);\r\n            });\r\n            // [END delete_token]\r\n        }).catch((err) => {\r\n            console.log('Error retrieving Instance ID token. ', err);\r\n        });\r\n    }\r\n}\r\n    ","import axios from 'axios'\r\n\r\nexport default class SubscriptionClientStub {\r\n    endpoint = \"https://www.test.com\";\r\n\r\n    subscribeAsync({userId, channels, token }) {\r\n       return;\r\n    }\r\n  }","import { Container, mappings } from \"./bootstrap\"\r\nimport MessagingServiceStub from \"./application/messaging/stub/MessagingServiceStub\"\r\nimport SubscriptionClientStub from \"./infrastructure/clients/stub/SubscriptionClientStub\";\r\n\r\nclass DevBootstrap {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    initialize = () => {\r\n        this._regiserMockChannelsClient()\r\n            ._registerMockMessagingService();\r\n    }\r\n\r\n    _registerMockMessagingService = () => {\r\n        Container.asSingleton(mappings.MessagingService, () => new MessagingServiceStub());\r\n        return this;\r\n    }\r\n\r\n    _regiserMockChannelsClient = () => {\r\n        Container.asSingleton(mappings.SubscriptionsClient, () => new SubscriptionClientStub());\r\n        return this;\r\n    }\r\n}\r\n\r\nconst devContainer = new DevBootstrap();\r\nexport default devContainer;","import { useEffect, useState } from 'react'\r\nimport DevContainer from '../../../devBootstrap'\r\n\r\nfunction useInitialization() {\r\n    const [initializated, setInitializated] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (initializated)\r\n            return;\r\n\r\n        DevContainer.initialize();\r\n\r\n        setInitializated(true);\r\n        \r\n    }, [initializated, setInitializated]);\r\n\r\n    return initializated;\r\n}\r\n\r\nexport default useInitialization;","import React from 'react';\nimport './App.css';\nimport { ThemeProvider } from '@material-ui/core';\n\nimport theme from './Theme';\nimport AppBarComponent from './presentation/views/AppBar/AppBarComponent'\nimport ChannelsList from './presentation/views/ChannelsList/ChannelsList'\nimport Footer from './presentation/views/Footer/Footer'\nimport useInitialization from './application/hooks/Initialization/useInitialization'\nimport { RecoilRoot } from 'recoil';\nimport { enableMapSet } from 'immer'\n\nfunction App() {\n  const isInitialized = useInitialization();\n\n  const mockChannels = [\n    {\n      category: \"YOUTUBE\",\n      items: [\n        {\n          id: 1,\n          imageUrl: \"/assets/1.jpg\",\n          channelName: \"Joe Rogan\"\n        },\n        {\n          id: 2,\n          imageUrl: \"/assets/2.jpg\",\n          channelName: \"Mark Dice\"\n        },\n        {\n          id: 3,\n          imageUrl: \"/assets/3.jpg\",\n          channelName: \"Louder With Crouwder\"\n        },\n      ]\n    }\n  ];\n\n  enableMapSet();\n\n  return (\n    <RecoilRoot>\n      <div>\n          {isInitialized && \n          <ThemeProvider theme={theme}>\n            <AppBarComponent></AppBarComponent>\n\n            <ChannelsList channels={mockChannels}></ChannelsList>\n\n            <Footer></Footer>\n          </ThemeProvider>}\n      </div>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import './firebase-messaging-sw';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n //unregisterServiceWorker();\n"],"sourceRoot":""}